version: '3.4'

services:
  apigateway-container:
      image: ${DOCKER_REGISTRY-}apigateway
      container_name: apigateway-container
      build:
        context: .
        dockerfile: Backend/ApiGateways/Ocelot.Gateway/Dockerfile
      ports:
        - "5001:80"  
      depends_on:
        - order-container
        - discount-container
        - cart-container
        - product-container
        - user-container
        - category-container
      restart: unless-stopped
      networks:
        - app-network
      volumes:
        - ./Backend/ApiGateways/Ocelot.Gateway/ocelot.json:/app/ocelot.json 

  order-container:
    image: ${DOCKER_REGISTRY-}orderservice
    container_name: order-container
    build:
      context: .
      dockerfile: Backend/Services/Order/Order.Api/Dockerfile
    ports:
      - "5000:80"
    depends_on:
      - sqlserver-container
    restart: unless-stopped
    networks:
      - app-network

  discount-container:
    image: ${DOCKER_REGISTRY-}discountservice
    container_name: discount-container
    build:
      context: .
      dockerfile: Backend/Services/Discount/Discount.Api/Dockerfile
    ports:
      - "5002:80"
    depends_on:
      - sqlserver-container
    restart: unless-stopped
    networks:
      - app-network

  cart-container:
    image: ${DOCKER_REGISTRY-}cartservice
    container_name: cart-container
    build:
      context: .
      dockerfile: Backend/Services/Cart/Cart.Api/Dockerfile
    ports:
      - "5004:80"
    depends_on:
      - redis-container
    restart: unless-stopped
    networks:
      - app-network

  product-container:
    image: ${DOCKER_REGISTRY-}productservice
    container_name: product-container
    build:
      context: .
      dockerfile: Backend/Services/Product/Product.Api/Dockerfile
    ports:
      - "5006:80"
    depends_on:
      - mongodb-container      
    restart: unless-stopped
    networks:
      - app-network

  user-container:
    image: ${DOCKER_REGISTRY-}userservice
    container_name: user-container
    build:
      context: .
      dockerfile: Backend/Services/User/User.Api/Dockerfile
    ports:
      - "5009:80"
    depends_on:
      - sqlserver-container
    restart: unless-stopped
    networks:
      - app-network

  category-container:
    image: ${DOCKER_REGISTRY-}categoryservice
    container_name: category-container
    build:
      context: .
      dockerfile: Backend/Services/Category/Category.Api/Dockerfile
    ports:
      - "5008:80"
    depends_on:
      - mongodb-container
    restart: unless-stopped
    networks:
      - app-network

  rabitmq-container:
    image: rabbitmq:3-management
    container_name: rabitmq-container
    ports:
      - "15672:15672"
      - "5672:5672"
    restart: unless-stopped
    volumes:
      - rabitmq-data:/var/lib/rabbitmq
    networks:
      - app-network

  redis-container:
    image: redis
    container_name: redis-container
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  mongodb-container:
    image: mongo
    container_name: mongodb-container
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  sqlserver-container:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver-container
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=Admin@27122003!
      - MSSQL_PID=Express
    volumes:
      - sqlserver-data:/var/opt/mssql
    ports:
      - "1433:1433" 
    restart: unless-stopped
    networks:
      - app-network

volumes:
  redis-data:
  mongo-data:
  sqlserver-data:
  rabitmq-data:

networks:
  app-network:
    driver: bridge
